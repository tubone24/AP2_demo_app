# AP2 エージェント パスフレーズ設定
#
# セキュリティ要件:
# - 各エージェントには一意で強固なパスフレーズを設定してください
# - 最低32文字以上を推奨
# - 本番環境では secrets manager を使用してください
#
# 使用方法:
#   1. このファイルを .env にコピー
#   2. 各パスフレーズを強固な値に変更
#   3. docker-compose up を実行

# Shopping Agent
AP2_SHOPPING_AGENT_PASSPHRASE=CHANGE_THIS_TO_SECURE_PASSPHRASE_MIN_32_CHARS_SHOPPING

# Merchant Agent
AP2_MERCHANT_AGENT_PASSPHRASE=CHANGE_THIS_TO_SECURE_PASSPHRASE_MIN_32_CHARS_MERCHANT_AGENT

# Merchant
AP2_MERCHANT_PASSPHRASE=CHANGE_THIS_TO_SECURE_PASSPHRASE_MIN_32_CHARS_MERCHANT

# Credential Provider
AP2_CREDENTIAL_PROVIDER_PASSPHRASE=CHANGE_THIS_TO_SECURE_PASSPHRASE_MIN_32_CHARS_CP

# Payment Processor
AP2_PAYMENT_PROCESSOR_PASSPHRASE=CHANGE_THIS_TO_SECURE_PASSPHRASE_MIN_32_CHARS_PP

# データベース設定（オプション）
DATABASE_URL=sqlite+aiosqlite:////app/v2/data/ap2.db

# フロントエンド設定
NEXT_PUBLIC_SHOPPING_AGENT_URL=http://localhost:8000
NEXT_PUBLIC_CREDENTIAL_PROVIDER_URL=http://localhost:8003

# ロギング設定
# LOG_LEVEL: ログレベル (DEBUG/INFO/WARNING/ERROR/CRITICAL)
# - DEBUG: 詳細なデバッグ情報（HTTPペイロード、A2Aメッセージ等）
# - INFO: 一般的な情報メッセージ（デフォルト）
# - WARNING: 警告メッセージ
# - ERROR: エラーメッセージのみ
# - CRITICAL: 致命的なエラーのみ
LOG_LEVEL=INFO

# LOG_FORMAT: ログフォーマット (text/json)
# - text: 人間が読みやすい形式（デフォルト）
# - json: 構造化JSON形式（本番環境推奨）
LOG_FORMAT=text

# AI Agent設定（LangGraph + Docker Model Runner）
# DMR_API_URL: OpenAI互換APIエンドポイント（Docker Model Runner）
DMR_API_URL=http://host.docker.internal:12434/engines/llama.cpp/v1


DMR_MODEL=ai/qwen3

# DMR_API_KEY: APIキー（不要な場合は"none"）
DMR_API_KEY=none

# LangGraph Shopping Flow設定
# USE_LANGGRAPH_FLOW: LangGraph StateGraphベースのショッピングフローを使用（true/false）
# - true: 新しいLangGraph実装を使用（12ノード構成のStateGraph）【推奨・標準実装】
# - false: 既存の実装を使用（レガシー、非推奨）
# メリット: 可読性向上、保守性向上、テスタビリティ向上、可視化対応、AP2完全準拠
# 注意: 古いLangGraph実装（langgraph_agent.py等）は廃止されました。新しいStateGraphが標準です。
USE_LANGGRAPH_FLOW=true

# Langfuse トレーシング設定
# LANGFUSE_PUBLIC_KEY: Langfuse公開キー
LANGFUSE_PUBLIC_KEY=pk-lf-xxxxxxxx

# LANGFUSE_SECRET_KEY: Langfuseシークレットキー
LANGFUSE_SECRET_KEY=sk-lf-xxxxxxxx

# LANGFUSE_HOST: LangfuseホストURL（デフォルト: https://cloud.langfuse.com）
LANGFUSE_HOST=https://cloud.langfuse.com

# LANGFUSE_ENABLED: Langfuseトレーシング有効化（true/false）
LANGFUSE_ENABLED=false

# ========================================
# Passkey認証 + JWT設定（AP2仕様準拠）
# ========================================

# JWT_SECRET_KEY: JWT署名用シークレットキー（必須、本番環境では強固なランダム文字列を使用）
# セキュリティ要件: 最低32文字以上、ランダムな文字列
# 生成例: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=CHANGE_THIS_TO_RANDOM_SECRET_KEY_MIN_32_CHARS_FOR_PRODUCTION

# JWT_ALGORITHM: JWT署名アルゴリズム（デフォルト: HS256）
JWT_ALGORITHM=HS256

# JWT_ACCESS_TOKEN_EXPIRE_MINUTES: JWTトークン有効期限（分）
# デフォルト: 1440分（24時間）
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=1440

# WEBAUTHN_RP_ID: WebAuthn Relying Party ID（デフォルト: localhost）
# 本番環境: 実際のドメイン名を設定（例: ap2-demo.example.com）
WEBAUTHN_RP_ID=localhost

# WEBAUTHN_RP_NAME: WebAuthn Relying Party表示名
WEBAUTHN_RP_NAME=AP2 Demo Shopping Agent

# ========================================
# OpenTelemetry 分散トレーシング設定
# ========================================

# OTEL_ENABLED: OpenTelemetry分散トレーシングの有効化（true/false）
# デフォルト: true（開発環境では有効化を推奨）
OTEL_ENABLED=true

# OTEL_EXPORTER_OTLP_ENDPOINT: OTLPエクスポーターのエンドポイント
# デフォルト: http://jaeger:4317（Docker Compose環境）
# ローカル環境: http://localhost:4317
OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317

# OTEL_EXPORTER_OTLP_INSECURE: 非セキュア接続の許可（true/false）
# デフォルト: true（開発環境）
# 本番環境: false（TLS必須）
OTEL_EXPORTER_OTLP_INSECURE=true

# 注意事項:
# - JaegerはDockerコンテナとして起動されます（docker-compose.yml参照）
# - Jaeger UI: http://localhost:16686
# - トレースを確認するには、上記URLにアクセスしてください
